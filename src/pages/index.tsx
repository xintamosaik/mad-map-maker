import { type NextPage } from "next";
import Head from "next/head";
//import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title></title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-w-screen flex min-h-screen flex-col bg-gradient-to-b from-[#3b393a] to-[#323331]">
        <div className="flex items-center justify-between gap-12 px-4 py-0 ">
          <h1 className="text-2xl font-extrabold tracking-tight text-white">
            <span className="text-stone-600">Mad</span> Map Maker
          </h1>
          <p className="text-2xl font-extrabold tracking-tight text-white">
            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
          </p>

          <AuthShowcase />
        </div>

        <div className="grid grid-cols-3 gap-4 full">
          <div className="">
            <canvas className="w-full h-full bg-slate-400"></canvas>
          </div>
          <div className="col-span-2">
            <canvas className="w-full h-full bg-slate-300"></canvas>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="my-2 rounded-full bg-white/10 px-4 py-2 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
